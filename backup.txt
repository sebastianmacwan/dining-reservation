// import express from 'express';
// import cors from 'cors';
// import jwt from 'jsonwebtoken';
// import bcrypt from 'bcryptjs';
// import { v4 as uuidv4 } from 'uuid';
// import connectDB from './config/db.js';
// import User from './models/User.js';
// import Restaurant from './models/Restaurant.js';
// import Booking from './models/Booking.js';
// import dotenv from 'dotenv';
// dotenv.config();


// const app = express();
// const PORT = 3000;
// const JWT_SECRET = 'your-secret-key-here-change-in-production';

// // Middleware
// app.use(cors());
// app.use(express.json());

// // In-memory database (in production, use a real database)
// const users = [
//   {
//     id: '1',
//     name: 'Demo User',
//     email: 'user@demo.com',
//     password: bcrypt.hashSync('password123', 10),
//     role: 'user'
//   },
//   {
//     id: '2',
//     name: 'Admin User',
//     email: 'admin@demo.com',
//     password: bcrypt.hashSync('password123', 10),
//     role: 'admin'
//   }
// ];

// const restaurants = [
//   {
//     id: '1',
//     name: 'The Golden Spoon',
//     cuisine: 'Fine Dining',
//     rating: 4.8,
//     priceRange: '$$$',
//     image: 'https://images.pexels.com/photos/262978/pexels-photo-262978.jpeg?auto=compress&cs=tinysrgb&w=800',
//     address: '123 Gourmet Ave, Downtown',
//     description: 'The Golden Spoon offers an exceptional fine dining experience with contemporary cuisine crafted from the finest seasonal ingredients.',
//     openingHours: 'Mon-Thu: 5:00 PM - 10:00 PM, Fri-Sat: 5:00 PM - 11:00 PM, Sun: 5:00 PM - 9:00 PM',
//     phone: '+1 (555) 123-4567',
//     website: 'www.goldenspoondining.com',
//     gallery: [
//       'https://images.pexels.com/photos/262978/pexels-photo-262978.jpeg?auto=compress&cs=tinysrgb&w=800',
//       'https://images.pexels.com/photos/941861/pexels-photo-941861.jpeg?auto=compress&cs=tinysrgb&w=800'
//     ],
//     menu: ['Seasonal Tasting Menu', 'Ã€ La Carte', 'Wine Pairing'],
//     amenities: ['Valet Parking', 'Private Dining', 'Bar', 'Wine Cellar'],
//     reviews: [
//       {
//         id: '1',
//         userName: 'Sarah Johnson',
//         rating: 5,
//         comment: 'Absolutely incredible experience!',
//         date: '2024-01-15'
//       }
//     ],
//     featured: true
//   },
//   {
//     id: '2',
//     name: 'Bella Vista',
//     cuisine: 'Italian',
//     rating: 4.6,
//     priceRange: '$$',
//     image: 'https://images.pexels.com/photos/941861/pexels-photo-941861.jpeg?auto=compress&cs=tinysrgb&w=800',
//     address: '456 Roma Street',
//     description: 'Authentic Italian cuisine in a cozy, family-friendly atmosphere.',
//     openingHours: '11:00 AM - 10:00 PM',
//     phone: '+1 (555) 234-5678',
//     website: 'www.bellavista.com',
//     gallery: [],
//     menu: ['Pasta', 'Pizza', 'Risotto'],
//     amenities: ['Outdoor Seating', 'Wine Bar'],
//     reviews: [],
//     featured: true
//   },
//   {
//     id: '3',
//     name: 'Sakura Garden',
//     cuisine: 'Japanese',
//     rating: 4.7,
//     priceRange: '$$$',
//     image: 'https://images.pexels.com/photos/1833349/pexels-photo-1833349.jpeg?auto=compress&cs=tinysrgb&w=800',
//     address: '789 Tokyo Lane',
//     description: 'Traditional Japanese cuisine with modern presentation.',
//     openingHours: '5:30 PM - 10:30 PM',
//     phone: '+1 (555) 345-6789',
//     website: 'www.sakuragarden.com',
//     gallery: [],
//     menu: ['Sushi', 'Sashimi', 'Hot Dishes'],
//     amenities: ['Sushi Bar', 'Private Rooms'],
//     reviews: [],
//     featured: true
//   }
// ];

// let bookings = [];

// // Auth middleware
// const authenticateToken = (req, res, next) => {
//   const authHeader = req.headers['authorization'];
//   const token = authHeader && authHeader.split(' ')[1];

//   if (!token) {
//     return res.status(401).json({ message: 'Access token required' });
//   }

//   jwt.verify(token, JWT_SECRET, (err, user) => {
//     if (err) {
//       return res.status(403).json({ message: 'Invalid token' });
//     }
//     req.user = user;
//     next();
//   });
// };

// // Auth routes
// app.post('/api/auth/signup', async (req, res) => {
//   try {
//     const { name, email, password } = req.body;
    
//     // Check if user exists
//     const existingUser = users.find(u => u.email === email);
//     if (existingUser) {
//       return res.status(400).json({ message: 'User already exists' });
//     }

//     // Hash password
//     const hashedPassword = bcrypt.hashSync(password, 10);
    
//     // Create user
//     const user = {
//       id: uuidv4(),
//       name,
//       email,
//       password: hashedPassword,
//       role: 'user'
//     };
    
//     users.push(user);

//     // Generate token
//     const token = jwt.sign({ id: user.id, email: user.email, role: user.role }, JWT_SECRET);
    
//     res.json({ 
//       token, 
//       user: { id: user.id, name: user.name, email: user.email, role: user.role } 
//     });
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.post('/api/auth/login', async (req, res) => {
//   try {
//     const { email, password } = req.body;
    
//     // Find user
//     const user = users.find(u => u.email === email);
//     if (!user) {
//       return res.status(400).json({ message: 'Invalid credentials' });
//     }

//     // Check password
//     const isValid = bcrypt.compareSync(password, user.password);
//     if (!isValid) {
//       return res.status(400).json({ message: 'Invalid credentials' });
//     }

//     // Generate token
//     const token = jwt.sign({ id: user.id, email: user.email, role: user.role }, JWT_SECRET);
    
//     res.json({ 
//       token, 
//       user: { id: user.id, name: user.name, email: user.email, role: user.role } 
//     });
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.get('/api/auth/me', authenticateToken, (req, res) => {
//   const user = users.find(u => u.id === req.user.id);
//   if (!user) {
//     return res.status(404).json({ message: 'User not found' });
//   }
  
//   res.json({ id: user.id, name: user.name, email: user.email, role: user.role });
// });

// // Restaurant routes
// app.get('/api/restaurants', (req, res) => {
//   try {
//     const { featured, search, cuisine, priceRange, sort, limit } = req.query;
//     let filteredRestaurants = [...restaurants];

//     // Filter by featured
//     if (featured === 'true') {
//       filteredRestaurants = filteredRestaurants.filter(r => r.featured);
//     }

//     // Filter by search
//     if (search) {
//       const searchLower = search.toLowerCase();
//       filteredRestaurants = filteredRestaurants.filter(r => 
//         r.name.toLowerCase().includes(searchLower) || 
//         r.cuisine.toLowerCase().includes(searchLower) ||
//         r.address.toLowerCase().includes(searchLower)
//       );
//     }

//     // Filter by cuisine
//     if (cuisine) {
//       filteredRestaurants = filteredRestaurants.filter(r => r.cuisine === cuisine);
//     }

//     // Filter by price range
//     if (priceRange) {
//       filteredRestaurants = filteredRestaurants.filter(r => r.priceRange === priceRange);
//     }

//     // Sort
//     if (sort === 'rating') {
//       filteredRestaurants.sort((a, b) => b.rating - a.rating);
//     } else if (sort === 'name') {
//       filteredRestaurants.sort((a, b) => a.name.localeCompare(b.name));
//     }

//     // Limit results
//     if (limit) {
//       filteredRestaurants = filteredRestaurants.slice(0, parseInt(limit));
//     }

//     res.json(filteredRestaurants);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.get('/api/restaurants/:id', (req, res) => {
//   try {
//     const restaurant = restaurants.find(r => r.id === req.params.id);
//     if (!restaurant) {
//       return res.status(404).json({ message: 'Restaurant not found' });
//     }
//     res.json(restaurant);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.get('/api/restaurants/:id/timeslots', (req, res) => {
//   try {
//     const { date } = req.query;
    
//     // Generate mock time slots
//     const timeSlots = [
//       { time: '5:00 PM', available: true },
//       { time: '5:30 PM', available: false },
//       { time: '6:00 PM', available: true },
//       { time: '6:30 PM', available: true },
//       { time: '7:00 PM', available: false },
//       { time: '7:30 PM', available: true },
//       { time: '8:00 PM', available: true },
//       { time: '8:30 PM', available: true },
//       { time: '9:00 PM', available: false },
//       { time: '9:30 PM', available: true }
//     ];

//     res.json(timeSlots);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Booking routes
// app.post('/api/bookings', authenticateToken, (req, res) => {
//   try {
//     const { restaurantId, restaurantName, date, time, guests, specialRequests, totalAmount } = req.body;
    
//     const booking = {
//       id: uuidv4(),
//       userId: req.user.id,
//       restaurantId,
//       restaurantName,
//       date,
//       time,
//       guests,
//       specialRequests,
//       totalAmount,
//       status: 'confirmed',
//       createdAt: new Date().toISOString()
//     };

//     bookings.push(booking);
//     res.json(booking);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.get('/api/bookings/user', authenticateToken, (req, res) => {
//   try {
//     const userBookings = bookings.filter(b => b.userId === req.user.id);
//     res.json(userBookings);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// app.put('/api/bookings/:id/cancel', authenticateToken, (req, res) => {
//   try {
//     const bookingIndex = bookings.findIndex(b => b.id === req.params.id && b.userId === req.user.id);
    
//     if (bookingIndex === -1) {
//       return res.status(404).json({ message: 'Booking not found' });
//     }

//     bookings[bookingIndex].status = 'cancelled';
//     res.json(bookings[bookingIndex]);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Admin routes
// app.get('/api/admin/bookings', authenticateToken, (req, res) => {
//   if (req.user.role !== 'admin') {
//     return res.status(403).json({ message: 'Admin access required' });
//   }

//   try {
//     res.json(bookings);
//   } catch (error) {
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Debug endpoints to view in-memory data
// app.get('/api/debug/users', (req, res) => {
//   res.json(users);
// });

// app.get('/api/debug/bookings', (req, res) => {
//   res.json(bookings);
// });

// app.get('/api/debug/restaurants', (req, res) => {
//   res.json(restaurants);
// });

// // Serve static files in production
// if (process.env.NODE_ENV === 'production') {
//   app.use(express.static(path.join(__dirname, '../dist')));
  
//   app.get('*', (req, res) => {
//     res.sendFile(path.join(__dirname, '../dist/index.html'));
//   });
// }
// connectDB();

// app.listen(PORT, () => {
//   console.log(`Server running on port ${PORT}`);
// });
